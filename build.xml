<?xml version="1.0"?>
<project name="IBPWorkbenchLauncher" default="build" basedir=".">
    
    <description>
        ANT build file for IBPWorkbenchLauncher.
        
        The following major targets are available:

        build      used to create a jar file that can be used in
                   production code. It compiles a clean, optimized version of
                   the classes in the framework and packages them in a JAR.
                   The core classes in the framework  and any classes in the
                   contrib directory are used. The examples and test classes
                   are excluded.
        
        The following minor targets provide more control over the compiling
        and packaging of classes, allowing for example a JAR file to be
        created containing the framework classes and the examples.

        clean      remove all the files generated by the compile targets. This
                   deletes the build directory which contains the compiled
                   classes along with any JAR files created.

        classes    compile the classes

        jar        packages all of the compiled classes in the build directory
                   into the JAR file.
        
        debug      used to create a debug version of the IBPWorkbenchLauncher jar file.
                   Debug flags in the source code are enabled and the classes are compiled
                   with debug information and unoptimised. To build a jar file
                   execute the targets: clean, debug, jar separately in that 
                   order.
    </description>

    <property name="project.artifactId" value="ibpworkbench_launcher" />
    <property name="project.version" value="1.0" />

    <property name="bin.dir" location="bin" />
    <property name="src.dir" location="src" />
    <property name="build.dir" location="build" />
    <property name="jar.dir" location="jar" />
    <property name="lib.dir" location="lib" />
    
    <property name="installers.dir" location="installers"/>
    <property name="jre.zip" location="${installers.dir}/jre.zip"/>
    <property name="tomcat.zip" location="${installers.dir}/apache-tomcat-6.0.35-windows-x86.zip"/>
    <property name="tomcat.zip.expanded" value="apache-tomcat-6.0.35"/>
    <property name="mysql.zip" location="${installers.dir}/mysql-5.5.23-win32.zip"/>
    <property name="mysql.zip.expanded" value="mysql-5.5.23-win32"/>
    
    <property name="installers_conf.dir" location="installers_conf"/>
    <property name="installers_release_conf.dir" location="installers_release_conf"/>
    <property name="webapps.dir" location="webapps"/>
    <property name="tools.dir" location="tools"/>
    <property name="tools_conf.dir" location="tools_conf"/>
	<property name="init_files.dir" location="init_files"/>
    <property name="documentation.dir" location="documentation"/>
    <property name="demo_scripts.dir" location="demo_scripts"/>
    <property name="launch4j.dir" location="launch4j"/>
    <property name="images.dir" location="images"/>
    <property name="dist.dir" value="E:/dist"/>
    <property name="nsis.dir" location="nsis"/>
    
    <property name="IBDBScripts.dir" location="../IBDBScripts"/>
    <property name="crop.database.dir" location="crop_databases"/>
    
    <property name="makensis.path" value="C:/Program Files (x86)/NSIS/makensis.exe"/>
    <property name="launch4j.path" value="C:/Program Files (x86)/Launch4j/launch4jc.exe"/>
    
    <property name="dist.mysql.path" value="${dist.dir}/mysql/bin/mysql.exe"/>
    <property name="dist.mysqld.path" value="${dist.dir}/mysql/bin/mysqld.exe"/>
    
    <property name="mysql.port" value="13306"/>
    <property name="run_script.path" location="crop_databases/run_script.bat"/>
    <property name="stop_mysql_script.path" location="crop_databases/stop_mysql.bat"/>
    
    <property name="package.dir" value="org" />

    <property name="version" value="${project.version}" />
    
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${lib.dir}/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!-- **********************************************************
         Classpath to be used when compiling project classes.
    ********************************************************** -->
    <path id="project.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>
    
    <!-- **********************************************************
         Major targets for compiling and packaging the classes.
     ********************************************************** -->

    <target name="build" depends="clean,compile,jar,del-build-dir" description="Compile optimized versions for deployment">
        <echo>You can also run the "make_installer" target to create the distribution directory and the installer file.</echo>
    </target>
    
    <!-- *******************************************************************
         Minor targets to compile and package different sets of classes.
     ******************************************************************* -->

    <target name="clean" description="Remove all the compiled classes">
        <delete dir="${build.dir}" failonerror="false" />
        <delete file="${jar.dir}/${project.artifactId}.jar" failonerror="false" />
    </target>
    
    <target name="del-build-dir" description="Delete build directory">
        <delete dir="${build.dir}" failonerror="false" />
    </target>

    <target name="debug" description="Compile debug versions of the classes">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${jar.dir}" />

        <javac srcdir="${src.dir}" destdir="${build.dir}" debug="on" optimize="off" source="1.6">
            <include name="${package.dir}/**" />
        </javac>
    </target>

    <target name="compile" description="Compile the classes">
        <mkdir dir="${build.dir}" />

        <javac srcdir="${src.dir}" destdir="${build.dir}" debug="off" optimize="off" source="1.6" classpathref="project.classpath" includeantruntime="false">
            <include name="**" />
        </javac>
        
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}/main/resources">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
                <include name="**/*.txt"/>
                <include name="**/*.ico"/>
            </fileset>
        </copy>
    </target>

    <target name="jar" description="Package all of the classes in a JAR file">
        <mkdir dir="${jar.dir}"/>
        
        <jar jarfile="${jar.dir}/${project.artifactId}.jar">
            <manifest>
                <attribute name="Main-Class" value="org.generationcp.ibpworkbench.launcher.Launcher"/>
                <attribute name="Class-Path" value="."/>
                <attribute name="Premain-Class" value="org.springframework.instrument.InstrumentationSavingAgent"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**"/>
            </fileset>
            <!-- SWT -->
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/org.eclipse.swt.win32.win32.x86_3.6.2.v3659c.jar"/>
            <!-- Tomcat -->
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/bootstrap.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/tomcat-juli.jar"/>
            <!-- Spring -->
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/spring-instrument-3.1.1.RELEASE.jar"/>
            <!-- MySQL -->
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/mysql-connector-java-5.1.13-bin.jar"/>
            <!-- HTTP Client -->
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/httpclient-4.2.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/httpcore-4.2.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/httpmime-4.2.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/commons-codec-1.6.jar"/>
            <!-- Logging -->
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/slf4j-api-1.6.4.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/logback-core-1.0.1.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/logback-classic-1.0.1.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/commons-logging-1.1.1.jar"/>
        </jar>
    </target>
    
    <target name="launch4j" depends="build, dist-mkdir" description="Create an executable launcher">
        <copy todir="${dist.dir}">
            <fileset dir="${jar.dir}"/>
            <fileset dir="${launch4j.dir}"/>
        </copy>
        <copy todir="${dist.dir}/images">
            <fileset dir="${images.dir}"/>
        </copy>
        
        <exec dir="${dist.dir}" executable="${launch4j.path}">
            <arg value="launch4j.xml"/>
        </exec>
    </target>
    
    <target name="dist-mkdir">
        <mkdir dir="${dist.dir}"/>
    </target>
    
    <target name="unzip-jre">
        <unzip src="${jre.zip}" dest="${dist.dir}"/>
    </target>
    
    <target name="unzip-mysql">
        <unzip src="${mysql.zip}" dest="${dist.dir}"/>
        <move todir="${dist.dir}/mysql">
            <fileset dir="${dist.dir}/${mysql.zip.expanded}"/>
        </move>
    </target>
    
    <target name="unzip-tomcat">
        <unzip src="${tomcat.zip}" dest="${dist.dir}"/>
        <move todir="${dist.dir}/tomcat">
            <fileset dir="${dist.dir}/${tomcat.zip.expanded}"/>
        </move>
        
        <!-- Delete the unnecessary Tomcat files -->
        <delete dir="${dist.dir}/tomcat/conf/Catalina/localhost" failonerror="no"/>
        <mkdir dir="${dist.dir}/tomcat/conf/Catalina/localhost"/>
        <delete dir="${dist.dir}/tomcat/webapps" failonerror="no"/>
        <mkdir dir="${dist.dir}/tomcat/webapps"/>
    </target>
    
    <target name="update-conf-files" description="Update the configuration files">
        <copy todir="${dist.dir}" overwrite="yes" verbose="yes">
            <fileset dir="${installers_conf.dir}"/>
        </copy>
    </target>
    
    <target name="copy-webapps" description="Copy webapps to Tomcat">
        <!-- Copy the web apps to tomcat -->
        <copy todir="${dist.dir}/tomcat/webapps" overwrite="yes" verbose="yes">
            <fileset dir="${webapps.dir}/${database}">
                <exclude name="readme.txt"/>
            </fileset>
        </copy>
    </target>
    
    <target name="copy-tools" description="Copy tools">
        <copy todir="${dist.dir}/tools">
            <fileset dir="${tools.dir}">
                <exclude name="readme.txt"/>
            </fileset>
        </copy>
    </target>
    
    <target name="update-tools-conf" description="Update tools configuration">
        <copy todir="${dist.dir}/tools" overwrite="true" verbose="true">
            <fileset dir="${tools_conf.dir}/${database}">
                <exclude name="readme.txt"/>
            </fileset>
        </copy>
    </target>
    
    <target name="copy-init-files" description="Copy initial files">
        <copy todir="${dist.dir}" overwrite="true" verbose="true">
            <fileset dir="${init_files.dir}">
                <exclude name="readme.txt"/>
            </fileset>
        </copy>
    </target>
    
    <target name="copy-documentation" description="Copy documentation and sample files">
        <copy todir="${dist.dir}/documentation" overwrite="true" verbose="true">
            <fileset dir="${documentation.dir}">
                <exclude name="readme.txt"/>
            </fileset>
        </copy>
    </target>
    
    <target name="copy-demo-scripts" description="Copy demo scripts">
        <copy todir="${dist.dir}/demo_scripts" overwrite="true" verbose="true">
            <fileset dir="${demo_scripts.dir}">
                <exclude name="readme.txt"/>
            </fileset>
        </copy>
    </target>
    
    <target name="dist-create" depends="dist-mkdir,unzip-jre,unzip-mysql,unzip-tomcat,update-conf-files,copy-webapps,copy-tools,update-tools-conf,copy-init-files,copy-documentation,copy-demo-scripts" description="Copy necessary files on the distribution directory">
    </target>
    
    <target name="dist-start-mysqld" description="Starts the MySQL daemon">
        <exec dir="${dist.dir}/mysql/bin" executable="${dist.mysqld.path}" spawn="true">
            <arg value="--defaults-file=../my.ini"/>
        </exec>
        
        <echo>Sleeping for 10 seconds to allow the MySQL server to start</echo>
        <sleep seconds="10"/>
    </target>
    
    <target name="dist-stop-mysqld" description="Stop the MySQL daemon">
        <exec dir="${dist.dir}/mysql/bin" executable="${stop_mysql_script.path}" spawn="false">
        </exec>
        
        <echo>Sleeping for 5 seconds to allow the MySQL server to shutdown</echo>
        <sleep seconds="5"/>
    </target>
    
    <target name="dist-initialize-database" description="Initializes the database with necessary data based on the 'database' parameter.">
        <echo>Initializing with database: ${database}</echo>
        
        <!-- Create the central and local database -->
        <sql userid="root" password="" url="jdbc:mysql://localhost:13306/" driver="com.mysql.jdbc.Driver">
            DROP DATABASE IF EXISTS ibdb_${database}_central;
            CREATE DATABASE ibdb_${database}_central;
            
            DROP DATABASE IF EXISTS ibdb_${database}_local;
            CREATE DATABASE ibdb_${database}_local;
            
            GRANT ALL ON ibdb_${database}_central.* TO 'central'@'localhost' IDENTIFIED BY 'central';
            GRANT ALL ON ibdb_${database}_local.* TO 'local'@'localhost' IDENTIFIED BY 'local';
            FLUSH PRIVILEGES;
        </sql>
        
        <!-- Initialize the local database -->
        <foreach target="run_script_local" param="sqlFile">
            <path>
                <fileset dir="${IBDBScripts.dir}">
                    <include name="IBDBv1_DMS.sql"/>
                    <include name="IBDBv1_GMS-LOCAL.sql"/>
                    <include name="IBDBv1_IMS.sql"/>
                    <include name="IBDBv1_Workbench_Project.sql"/>
                </fileset>
                <fileset dir="${IBDBScripts.dir}">
                    <include name="IBDBv1_GDMS_User.sql"/>
                </fileset>
                <fileset dir="${crop.database.dir}/local/${database}">
                    <include name="**/*.sql"/>
                </fileset>
            </path>
        </foreach>

        <!-- Initialize the central database -->
        <foreach target="run_script_central" param="sqlFile">
            <path>
                <fileset dir="${crop.database.dir}/central/${database}">
                    <include name="**/*.sql"/>
                </fileset>
                <fileset dir="${IBDBScripts.dir}">
                    <include name="IBDBv1_GDMS_User.sql"/>
                </fileset>
            </path>
        </foreach>
    </target>
    
    <target name="use-release-conf">
        <copy todir="${dist.dir}" overwrite="true" verbose="true">
            <fileset dir="${installers_release_conf.dir}"/>
        </copy>
    </target>
    
    <target name="run_script_central" description="Run SQL script on the local database">
        <exec dir="${dist.dir}/mysql/bin" executable="${run_script.path}" spawn="false">
            <arg value="${mysql.port}"/>
            <arg value="ibdb_${database}_central"/>
            <arg value="${sqlFile}"/>
        </exec>
    </target>
    
    <target name="run_script_local" description="Run SQL script on the central database">
        <exec dir="${dist.dir}/mysql/bin" executable="${run_script.path}" spawn="false">
            <arg value="${mysql.port}"/>
            <arg value="ibdb_${database}_local"/>
            <arg value="${sqlFile}"/>
        </exec>
    </target>
    
    <target name="dist-clean">
        <!-- TODO: We can actually stop any running workbench here by using the "taskkill" command -->
        
        <delete dir="${dist.dir}"/>
    </target>

    <target name="dist" depends="dist-clean, dist-mkdir, launch4j, dist-create, dist-start-mysqld, dist-initialize-database, use-release-conf, dist-stop-mysqld" description="">
        <echo>Distribution directory created.</echo>
        <echo>You can run the 'nsis' target now if you want to create the installer</echo>
    </target>
    
    <target name="nsis" description="Copy NSIS files on the distribution directory in preparation for creating the installer">
        <delete file="${dist.dir}/ibpworkbench-win32.exe" failonerror="false"/>
        
        <copy todir="${dist.dir}">
            <fileset dir="${nsis.dir}"/>
        </copy>
        
        <exec dir="${dist.dir}" executable="${makensis.path}">
            <arg value="/P5"/>
            <arg value="install.nsi"/>
        </exec>
        
        <echo>The installer file is ${dist.dir}\ibpworkbench-win32.exe</echo>
    </target>
    
    <target name="make_installer" depends="dist, nsis" description="Build the distribution directory and create the installer">
    </target>
</project>
